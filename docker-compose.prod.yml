version: "3"

volumes:
  nginx_static_files: {}
  prod_postgres_data: {}
  prod_postgres_data_backups: {}
services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/prod/Dockerfile

    volumes:
      - .:/app
    env_file:
      - ./.envs/.prod/.django
      - ./.envs/.prod/.postgres
    command: /start
    expose:
      - 8000
    depends_on:
      - redis

  nginx:
    image: nginx:1.19-alpine
    volumes:
      - ./compose/prod/nginx:/etc/nginx/conf.d
      - ./compose/certbot/conf:/etc/letsencrypt
      - ./compose/certbot/www:/var/www/certbot
      - nginx_static_files:/app/staticfiles
    ports:
      - 80:80
      - 443:443
    depends_on:
      - django
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./compose/certbot/conf:/etc/letsencrypt
      - ./compose/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  postgres:
    image: postgres:12-alpine
    volumes:
      - prod_postgres_data:/var/lib/postgresql/data
      - prod_postgres_data_backups:/backups
    env_file:
      - ./.envs/.prod/.postgres
  redis:
    image: redis:6-alpine

  channels:
    <<: *django
    image: talendy_channels
    volumes:
      - .:/app
      - ./compose/certbot/conf:/etc/letsencrypt
    command: daphne -e ssl:8001:privateKey=/etc/letsencrypt/live/api.talendy.com/privkey.pem:certKey=/etc/letsencrypt/live/api.talendy.com/fullchain.pem config.asgi:application
    ports:
      - 8001:8001

  celeryworker:
    <<: *django
    image: talendy_prod_celeryworker
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: talendy_prod_celerybeat
    command: /start-celerybeat

  flower:
    <<: *django
    image: talendy_prod_flower
    ports:
      - "5555:5555"
    command: /start-flower

  collaborationrooms:
    build:
      context: .
      dockerfile: ./compose/dev/collaboration-rooms/Dockerfile

    ports:
      - "5500:5500"
    command: yarn start

  chats:
    build:
      context: .
      dockerfile: ./compose/dev/chats/Dockerfile

    ports:
      - "5400:5400"
    command: yarn start
